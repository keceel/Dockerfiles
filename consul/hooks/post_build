#!/usr/bin/env bash
#  vim:ts=4:sts=4:sw=4:et
#
#  Author: Hari Sekhon
#  Date: 2016-12-17 19:47:36 +0000 (Sat, 17 Dec 2016)
#
#  https://github.com/harisekhon/Dockerfiles
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/harisekhon
#

set -euo pipefail
[ -n "${DEBUG:-}" ] && set -x
srcdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

highest_tag="unknown"

current_scala="2.11"

if [ -z "${IMAGE_NAME:-}" ]; then
    IMAGE_NAME="$(awk -F= '/^[[:space:]]*REPO[[:space:]]*:*=/{gsub (" ", "", $2); print $2}' "$srcdir/../Makefile")"
    if [ -z "$IMAGE_NAME" ]; then
        echo "FAILED to determine IMAGE_NAME From Makefile"
        exit 1
    fi
    echo "IMAGE_NAME not set, determined from Makefile to be '$IMAGE_NAME'"
fi
DOCKER_REPO="${DOCKER_REPO:-${IMAGE_NAME/:*}}"

if [ -z "${SOURCE_BRANCH:-}" ]; then
    SOURCE_BRANCH="$(git branch  | sed -n 's/*[[:space:]]*//p')"
    echo "SOURCE_BRANCH not set, determined from git to be '$SOURCE_BRANCH'"
fi
# readlink is not portable across Linux + Mac
docker_branch_base="$(basename "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; echo "$PWD")")"
docker_branch_base="${docker_branch_base%-dev}"
docker_branch_base="${docker_branch_base%-cluster}"
docker_version_base="${docker_branch_base//-/_}"
docker_branch_base="${docker_branch_base/solrcloud/solr}"
if [ "$docker_branch_base" = "kafka" ]; then
    highest_tag="${current_scala}_0.9"
    echo "Kafka detected, overriding highest tag to be $highest_tag"
else
    # This depends on the Dockerfiles content and version ordering being correct, but this also causes a lot of merge conflicts when merging improvements from master so not storing all previous versions commented out any more as it's more of an inconvenience
    #highest_tag="$(grep -i ARG.*${docker_version_base}_VERSION= Dockerfile | sed -n '$s/.*=//p' | awk -F. '{print $1"."$2}')"
    # use Git branch versions as the source of truth
    branches="$(git branch -a | grep -i "remotes/.*/$docker_branch_base")"
    if [ -n "$branches" ]; then
        if [ "$(wc -l <<< "$branches")" -ge 2 ]; then
            highest_tag="$(sed 's/.*\/// ; s/.*-\([[:digit:]]\)/\1/' <<< "$branches" | sed 's/\./ /g' | sort -n -k1 -k2 | sed 's/ /./g' | tail -n 1)"
            echo "determined highest tag from git branches to be $highest_tag"
        else
            echo "WARNING: less than 2 matching branches found, cannot determine the highest tag"
        fi
    fi
fi

if ! grep ':' <<< "$IMAGE_NAME";  then
    current_tag="$(grep -i "^[[:space:]]*ARG.*${docker_version_base}_VERSION=" Dockerfile | sed -n '$s/.*=//p' | awk -F. '{print $1"."$2}')"
    if [ "$docker_branch_base" = "kafka" ]; then
        current_tag="${current_scala}_$current_tag"
    fi
    echo "current tag not found in IMAGE_NAME=$IMAGE_NAME, determined from Dockerfile to be '$current_tag'"
    IMAGE_NAME="$IMAGE_NAME:$current_tag"
fi

is_latest(){
    if [ "$SOURCE_BRANCH" = "master" ]; then
        echo "determined to be latest build, due to running on master branch"
        return 0
    elif [ "$SOURCE_BRANCH" = "$docker_branch_base-$highest_tag" ]; then
        echo "determined to be highest tagged build, due to SOURCE_BRANCH = '$SOURCE_BRANCH' == \$docker_branch_base-\$highest_tag = '$docker_branch_base-$highest_tag'"
        return 0
    fi
    echo "$SOURCE_BRANCH is not the latest build, which is $docker_branch_base-$highest_tag"
    return 1
}

if is_latest; then
    echo "docker tag \"$IMAGE_NAME\" \"$DOCKER_REPO:latest\""
    docker tag "$IMAGE_NAME" "$DOCKER_REPO:latest"
    echo "docker push \"$DOCKER_REPO:latest\""
    docker push "$DOCKER_REPO:latest"
fi
